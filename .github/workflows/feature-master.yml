# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ staging ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Install PMD
      # - name: 'Install PMD'
      #   run: |
      #       PMD_VERSION=`cat pmd/pmd-version.txt`
      #       wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
      #       unzip pmd-bin-$PMD_VERSION.zip -d ~
      #       mv ~/pmd-bin-$PMD_VERSION ~/pmd
      #       ~/pmd/bin/run.sh pmd --version

      # # Run PMD scan
      # - name: 'Run PMD scan'
      #   run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/ruleset.xml -f text

       # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
            mkdir ~/sfdx
            tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
            echo "$HOME/sfdx/bin" >> $GITHUB_PATH
            ~/sfdx/bin/sfdx version

      # Authenticate with Dev-Hub
      - name: 'Authenticate with Dev-hub'
        run: sfdx force:auth:jwt:grant --clientid ${{secrets.CONSUMER_KEY}} --jwtkeyfile assets/server.key --username ${{secrets.USERNAME}} --setalias mydevhubTP --setdefaultdevhubusername
      
      # Create allow list to install unsigned plugins
      - name: 'Create allow list'
        run:  |
          cd $HOME/.config
          mkdir sfdx
          cd sfdx
          sudo echo '[
                    "sfdx-git-delta"
                ]' > unsignedPluginAllowList.json


      # Install the 'sfdx-git-delta' plugin and Create Delta
      - name: 'Install plugin and Create Delta'
        run : |
            sfdx plugins:install sfdx-git-delta
            git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
            git fetch --all
            git --no-pager diff --name-status staging origin/master
            sfdx sgd:source:delta --to staging --from origin/master --ignore .diffignore --repo . --output "."
            cat package/package.xml

      # Deploy
      - name: 'Deploy Metadata'
        run: sfdx force:source:deploy --manifest package/package.xml --testlevel=RunLocalTests -u mydevhubTP -w 30 -o

     
     